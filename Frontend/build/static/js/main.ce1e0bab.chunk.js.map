{"version":3,"sources":["features/chatSlice.js","Firebase.js","SidebarChat.js","features/userSlice.js","Sidebar.js","Message.js","Chat.js","IMessage.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["chatSlice","createSlice","name","initialState","user","reducers","setChat","state","action","chatId","payload","chatName","actions","selectChatName","chat","selectChatId","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","dispatch","useDispatch","useState","chatInfo","setChatInfo","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","className","Avatar","src","photo","message","timeago","Date","timestamp","toDate","userSlice","login","logout","selectUser","Sidebar","useSelector","chats","setChats","signOut","placeholder","IconButton","variant","prompt","add","Message","forwardRef","ref","contents","email","displayName","uid","toLocaleString","Chat","input","setInput","messages","setMessages","value","onChange","e","target","type","preventDefault","FieldValue","serverTimestamp","IMessage","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","store","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce1e0bab.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const chatSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    setChat: (state, action) => {\n      state.chatId = action.payload.chatId;\n      state.chatName = action.payload.chatName;\n    },\n  },\n});\n\nexport const { setChat } = chatSlice.actions;\n\nexport const selectChatName = (state) => state.chat.chatName;\nexport const selectChatId = (state) => state.chat.chatId;\n\nexport default chatSlice.reducer;","import firebase from 'firebase';\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAelJtJisvpG9DraXc45tQsEaldqwOTMYQ\",\n    authDomain: \"imessage-clone-eaaaf.firebaseapp.com\",\n    projectId: \"imessage-clone-eaaaf\",\n    storageBucket: \"imessage-clone-eaaaf.appspot.com\",\n    messagingSenderId: \"384850610312\",\n    appId: \"1:384850610312:web:db6f25ed7714862931b73d\",\n    measurementId: \"G-TGL3TRWVB9\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const db = firebaseApp.firestore();\n  const auth = firebase.auth();\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  export { auth, provider };\n  export default db;","import { Avatar } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {setChat} from './features/chatSlice';\nimport db from './Firebase';\nimport './SidebarChat.css';\nimport * as timeago from 'timeago.js';\n\n\nfunction SidebarChat({id, chatName}) {\n\n    const dispatch = useDispatch();\n    const [chatInfo, setChatInfo] = useState([]);\n\n    useEffect (() => {\n        db.collection('chats')\n        .doc(id)\n        .collection('messages')\n        .orderBy('timestamp', 'desc')\n        .onSnapshot(snapshot => (\n            setChatInfo(snapshot.docs.map(doc => doc.data()))\n        ));\n    }, [id]);\n    \n    return (\n        <div \n        onClick={() => \n            dispatch(\n                setChat({\n                    chatId: id,\n                    chatName: chatName,\n                })\n            )\n        } \n        className='sidebarChat'>\n            <Avatar src={chatInfo[0]?.photo}/>\n            <div className='sidebarChat__info'>\n                <h3>{chatName}</h3>\n                <p>{chatInfo[0]?.message}</p>\n                \n                <small>{timeago.format(\n                    new Date(chatInfo[0]?.timestamp?.toDate()))}\n                </small>\n            \n            </div>\n        </div>\n    )\n}\n\nexport default SidebarChat\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;","import React, { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport { Avatar, IconButton } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MessageIcon from '@material-ui/icons/Message';\nimport SidebarChat from './SidebarChat';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from './features/userSlice';\nimport db, {auth} from './Firebase'\n\n\nfunction Sidebar() {\n\n    const user = useSelector(selectUser);\n\n    const [chats, setChats] = useState([]);\n\n    useEffect(() => {\n        db.collection('chats').onSnapshot(snapshot => (\n            setChats(snapshot.docs.map(doc => ({\n                id: doc.id,\n                data: doc.data(),\n            })))\n            ))\n    }, [])\n\n    const addChat = () => {\n        \n        const chatName = prompt('Please enter a chat name')\n        if (chatName) {\n            db.collection('chats').add({\n                chatName: chatName,\n            });\n        }\n    \n    };\n\n    return (\n        <div className='sidebar'>\n\n            <div className='sidebar__header'>\n\n                <Avatar onClick={() => auth.signOut()} \n                src={user.photo} className='sidebar__avatar'/>\n\n                <div className='sidebar__input'>\n                    <SearchIcon/>\n                    <input placeholder='search'/>\n                </div>\n\n                <IconButton variant='outlined' className='sidebar__inputButton'>\n                    <MessageIcon onClick={addChat}/>\n                </IconButton>\n                \n\n            </div>\n\n            <div className='sidebar__chats'>\n                {chats.map(({id, data: {chatName} }) => (\n                \n                    <SidebarChat key={id} id={id} chatName={chatName}/>\n                \n                ))}\n                       \n            </div>\n            \n        </div>\n    )\n}\n\nexport default Sidebar\n","import { Avatar } from '@material-ui/core';\nimport React, { forwardRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from './features/userSlice';\nimport './Message.css';\n\nconst Message = forwardRef(({id, contents: {\n    timestamp, displayName, email, message, photo, uid }}, ref) => {\n\n    const user = useSelector(selectUser);\n\n    return (\n        <div ref={ref} className= {`message ${user.email === email && email && 'message__sender'}`}>\n            <Avatar className='message__photo' src={photo}/>\n            <p>{message}</p>\n            <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\n        </div>\n    )\n})\n\nexport default Message\n","import React, {useEffect, useState} from 'react';\nimport './Chat.css';\nimport MicIcon from '@material-ui/icons/Mic';\nimport { IconButton } from '@material-ui/core';\nimport Message from './Message'\nimport { useSelector } from 'react-redux';\nimport { selectChatId, selectChatName } from './features/chatSlice';\nimport db from './Firebase';\nimport firebase from 'firebase';\nimport { selectUser } from './features/userSlice';\nimport FlipMove from 'react-flip-move';\n\nfunction Chat() {\n\n    const [input, setInput] = useState('');\n    const [messages, setMessages] = useState([]);\n\n    const chatName = useSelector(selectChatName);\n    const chatId = useSelector(selectChatId);\n    const user = useSelector(selectUser);\n\n    useEffect (() => {\n        if (chatId) {\n            db.collection('chats').doc(chatId).collection('messages')\n            .orderBy('timestamp', 'desc')\n            .onSnapshot(snapshot => (\n                setMessages(\n                    snapshot.docs.map((doc) => ({\n                    id: doc.id,\n                    data: doc.data(),\n                })))\n            ))\n        }\n    }, [chatId])\n\n    const sendMessage = (e) => {\n        \n        e.preventDefault();\n        setInput('');\n\n        // firebase \n\n        db.collection(\"chats\").doc(chatId).collection(\"messages\").add({\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            message: input,\n            uid: user.uid,\n            photo: user.photo,\n            email: user.email,\n            displayName: user.displayName,\n          });\n\n        \n    }\n\n    return (\n        <div className='chat'>\n\n        {/* chat header */}\n            <div className='chat__header'>\n                <h4>To:\n                <span className='chat__name'> {chatName}</span>\n                </h4>\n                <strong>Details</strong>\n            </div>\n        {/* chat messages */}\n\n        <div className='chat__messages'>\n            <FlipMove>\n                {messages.map(({id, data}) => (\n                    <Message key={id} contents={data} />\n                ))}\n            </FlipMove>\n            \n\n        </div>\n\n\n        {/* chat input */}\n            <div className='chat__input'>\n                <form>\n                    \n                    <input \n                        value={input} \n                        onChange={(e) => setInput(e.target.value)} \n                        placeholder='ikteb hneye' type='text'/>\n                        \n                    <button onClick={sendMessage}>Send Message</button>\n                \n                </form>\n\n                <IconButton>\n                    <MicIcon className='chat__mic'/>\n                </IconButton>\n                \n\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","import React from 'react';\nimport './IMessage.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\n\nfunction IMessage() {\n    return (\n        \n        <div className='imessage'>\n        {/* sidebar */}\n        \n        <Sidebar/>\n        \n        \n        {/* chat */}\n        <Chat/>\n        </div>\n    )\n}\n\nexport default IMessage\n","import { Button } from '@material-ui/core';\nimport React from 'react';\nimport {auth, provider} from './Firebase'\nimport './Login.css';\n\nfunction Login() {\n\n    const signIn = () => {\n        auth.signInWithPopup(provider)\n        .catch((error) => alert(error.message));\n    }\n\n    return (\n        <div className='login'>\n            <div className='login__logo'>\n                <img src='https://www.seekpng.com/png/full/138-1387775_login-to-do-whatever-you-want-login-icon.png'\n                    alt='a yellow login logo'\n                />\n            </div>\n\n            <Button onClick={signIn}>Sign In BALIIZ !</Button>\n        </div>\n    )\n}\n\nexport default Login\n","import React, { useEffect } from 'react';\nimport IMessage from './IMessage';\nimport Login from './Login';\nimport './App.css';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {selectUser, login, logout} from './features/userSlice';\nimport { auth } from './Firebase';\n\n\nfunction App() {\n  \n  const user = useSelector (selectUser);\n  const dispatch = useDispatch();\n\n  useEffect (() => {\n    auth.onAuthStateChanged(authUser => {\n      if(authUser) {\n        dispatch(\n          login({\n            uid: authUser.uid,\n            photo: authUser.photoURL,\n            email: authUser.email,\n            displayName: authUser.displayName,\n        }))\n      } else {\n        dispatch(logout());\n      }\n    })\n  }, [])\n  \n  return (\n    <div className=\"app\">\n    {user ? ( <IMessage/> ): <Login/>}\n      \n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport chatReducer from '../features/chatSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    chat: chatReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}