{"ast":null,"code":"const crypto = require(\"crypto\");\n\nconst util = require(\"./util\");\n/** Verifies and signs data against the key and secret.\n *\n * @constructor\n * @param {String} key app key\n * @param {String} secret app secret\n */\n\n\nfunction Token(key, secret) {\n  this.key = key;\n  this.secret = secret;\n}\n/** Signs the string using the secret.\n *\n * @param {String} string\n * @returns {String}\n */\n\n\nToken.prototype.sign = function (string) {\n  return crypto.createHmac(\"sha256\", this.secret).update(Buffer.from(string)).digest(\"hex\");\n};\n/** Checks if the string has correct signature.\n *\n * @param {String} string\n * @param {String} signature\n * @returns {Boolean}\n */\n\n\nToken.prototype.verify = function (string, signature) {\n  return util.secureCompare(this.sign(string), signature);\n};\n\nmodule.exports = Token;","map":{"version":3,"sources":["/media/amine/HDD1/Kraya/2DNI/TP/S2/Framework/Projet/IMessage-Clone/Frontend/node_modules/pusher/lib/token.js"],"names":["crypto","require","util","Token","key","secret","prototype","sign","string","createHmac","update","Buffer","from","digest","verify","signature","secureCompare","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,KAAT,CAAeC,GAAf,EAAoBC,MAApB,EAA4B;AAC1B,OAAKD,GAAL,GAAWA,GAAX;AACA,OAAKC,MAAL,GAAcA,MAAd;AACD;AAED;AACA;AACA;AACA;AACA;;;AACAF,KAAK,CAACG,SAAN,CAAgBC,IAAhB,GAAuB,UAAUC,MAAV,EAAkB;AACvC,SAAOR,MAAM,CACVS,UADI,CACO,QADP,EACiB,KAAKJ,MADtB,EAEJK,MAFI,CAEGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAFH,EAGJK,MAHI,CAGG,KAHH,CAAP;AAID,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACAV,KAAK,CAACG,SAAN,CAAgBQ,MAAhB,GAAyB,UAAUN,MAAV,EAAkBO,SAAlB,EAA6B;AACpD,SAAOb,IAAI,CAACc,aAAL,CAAmB,KAAKT,IAAL,CAAUC,MAAV,CAAnB,EAAsCO,SAAtC,CAAP;AACD,CAFD;;AAIAE,MAAM,CAACC,OAAP,GAAiBf,KAAjB","sourcesContent":["const crypto = require(\"crypto\")\nconst util = require(\"./util\")\n\n/** Verifies and signs data against the key and secret.\n *\n * @constructor\n * @param {String} key app key\n * @param {String} secret app secret\n */\nfunction Token(key, secret) {\n  this.key = key\n  this.secret = secret\n}\n\n/** Signs the string using the secret.\n *\n * @param {String} string\n * @returns {String}\n */\nToken.prototype.sign = function (string) {\n  return crypto\n    .createHmac(\"sha256\", this.secret)\n    .update(Buffer.from(string))\n    .digest(\"hex\")\n}\n\n/** Checks if the string has correct signature.\n *\n * @param {String} string\n * @param {String} signature\n * @returns {Boolean}\n */\nToken.prototype.verify = function (string, signature) {\n  return util.secureCompare(this.sign(string), signature)\n}\n\nmodule.exports = Token\n"]},"metadata":{},"sourceType":"script"}