{"ast":null,"code":"const errors = require(\"./errors\");\n/** Provides validation and access methods for a WebHook.\n *\n * Before accessing WebHook data, check if it's valid. Otherwise, exceptions\n * will be raised from access methods.\n *\n * @constructor\n * @param {Token} primary token\n * @param {Object} request\n * @param {Object} request.headers WebHook HTTP headers with lower-case keys\n * @param {String} request.rawBody raw WebHook body\n */\n\n\nfunction WebHook(token, request) {\n  this.token = token;\n  this.key = request.headers[\"x-pusher-key\"];\n  this.signature = request.headers[\"x-pusher-signature\"];\n  this.contentType = request.headers[\"content-type\"];\n  this.body = request.rawBody;\n\n  if (this.isContentTypeValid()) {\n    try {\n      // Try to parse as JSON\n      this.data = JSON.parse(this.body);\n    } catch (e) {// Do nothing\n    }\n  }\n}\n/** Checks whether the WebHook has valid body and signature.\n *\n * @param {Token|Token[]} list of additional tokens to be validated against\n * @returns {Boolean}\n */\n\n\nWebHook.prototype.isValid = function (extraTokens) {\n  if (!this.isBodyValid()) {\n    return false;\n  }\n\n  extraTokens = extraTokens || [];\n\n  if (!(extraTokens instanceof Array)) {\n    extraTokens = [extraTokens];\n  }\n\n  const tokens = [this.token].concat(extraTokens);\n\n  for (const i in tokens) {\n    const token = tokens[i];\n\n    if (this.key == token.key && token.verify(this.body, this.signature)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/** Checks whether the WebHook content type is valid.\n *\n * For now, the only valid WebHooks have content type of application/json.\n *\n * @returns {Boolean}\n */\n\n\nWebHook.prototype.isContentTypeValid = function () {\n  return this.contentType === \"application/json\";\n};\n/** Checks whether the WebHook content type and body is JSON.\n *\n * @returns {Boolean}\n */\n\n\nWebHook.prototype.isBodyValid = function () {\n  return this.data !== undefined;\n};\n/** Returns all WebHook data.\n *\n * @throws WebHookError when WebHook is invalid\n * @returns {Object}\n */\n\n\nWebHook.prototype.getData = function () {\n  if (!this.isBodyValid()) {\n    throw new errors.WebHookError(\"Invalid WebHook body\", this.contentType, this.body, this.signature);\n  }\n\n  return this.data;\n};\n/** Returns WebHook events array.\n *\n * @throws WebHookError when WebHook is invalid\n * @returns {Object[]}\n */\n\n\nWebHook.prototype.getEvents = function () {\n  return this.getData().events;\n};\n/** Returns WebHook timestamp.\n *\n * @throws WebHookError when WebHook is invalid\n * @returns {Date}\n */\n\n\nWebHook.prototype.getTime = function () {\n  return new Date(this.getData().time_ms);\n};\n\nmodule.exports = WebHook;","map":{"version":3,"sources":["/media/amine/HDD1/Kraya/2DNI/TP/S2/Framework/Projet/IMessage-Clone/Frontend/node_modules/pusher/lib/webhook.js"],"names":["errors","require","WebHook","token","request","key","headers","signature","contentType","body","rawBody","isContentTypeValid","data","JSON","parse","e","prototype","isValid","extraTokens","isBodyValid","Array","tokens","concat","i","verify","undefined","getData","WebHookError","getEvents","events","getTime","Date","time_ms","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,OAAxB,EAAiC;AAC/B,OAAKD,KAAL,GAAaA,KAAb;AAEA,OAAKE,GAAL,GAAWD,OAAO,CAACE,OAAR,CAAgB,cAAhB,CAAX;AACA,OAAKC,SAAL,GAAiBH,OAAO,CAACE,OAAR,CAAgB,oBAAhB,CAAjB;AACA,OAAKE,WAAL,GAAmBJ,OAAO,CAACE,OAAR,CAAgB,cAAhB,CAAnB;AACA,OAAKG,IAAL,GAAYL,OAAO,CAACM,OAApB;;AAEA,MAAI,KAAKC,kBAAL,EAAJ,EAA+B;AAC7B,QAAI;AACF;AACA,WAAKC,IAAL,GAAYC,IAAI,CAACC,KAAL,CAAW,KAAKL,IAAhB,CAAZ;AACD,KAHD,CAGE,OAAOM,CAAP,EAAU,CACV;AACD;AACF;AACF;AAED;AACA;AACA;AACA;AACA;;;AACAb,OAAO,CAACc,SAAR,CAAkBC,OAAlB,GAA4B,UAAUC,WAAV,EAAuB;AACjD,MAAI,CAAC,KAAKC,WAAL,EAAL,EAAyB;AACvB,WAAO,KAAP;AACD;;AAEDD,EAAAA,WAAW,GAAGA,WAAW,IAAI,EAA7B;;AACA,MAAI,EAAEA,WAAW,YAAYE,KAAzB,CAAJ,EAAqC;AACnCF,IAAAA,WAAW,GAAG,CAACA,WAAD,CAAd;AACD;;AAED,QAAMG,MAAM,GAAG,CAAC,KAAKlB,KAAN,EAAamB,MAAb,CAAoBJ,WAApB,CAAf;;AACA,OAAK,MAAMK,CAAX,IAAgBF,MAAhB,EAAwB;AACtB,UAAMlB,KAAK,GAAGkB,MAAM,CAACE,CAAD,CAApB;;AACA,QAAI,KAAKlB,GAAL,IAAYF,KAAK,CAACE,GAAlB,IAAyBF,KAAK,CAACqB,MAAN,CAAa,KAAKf,IAAlB,EAAwB,KAAKF,SAA7B,CAA7B,EAAsE;AACpE,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACc,SAAR,CAAkBL,kBAAlB,GAAuC,YAAY;AACjD,SAAO,KAAKH,WAAL,KAAqB,kBAA5B;AACD,CAFD;AAIA;AACA;AACA;AACA;;;AACAN,OAAO,CAACc,SAAR,CAAkBG,WAAlB,GAAgC,YAAY;AAC1C,SAAO,KAAKP,IAAL,KAAca,SAArB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAvB,OAAO,CAACc,SAAR,CAAkBU,OAAlB,GAA4B,YAAY;AACtC,MAAI,CAAC,KAAKP,WAAL,EAAL,EAAyB;AACvB,UAAM,IAAInB,MAAM,CAAC2B,YAAX,CACJ,sBADI,EAEJ,KAAKnB,WAFD,EAGJ,KAAKC,IAHD,EAIJ,KAAKF,SAJD,CAAN;AAMD;;AACD,SAAO,KAAKK,IAAZ;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;;;AACAV,OAAO,CAACc,SAAR,CAAkBY,SAAlB,GAA8B,YAAY;AACxC,SAAO,KAAKF,OAAL,GAAeG,MAAtB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACA3B,OAAO,CAACc,SAAR,CAAkBc,OAAlB,GAA4B,YAAY;AACtC,SAAO,IAAIC,IAAJ,CAAS,KAAKL,OAAL,GAAeM,OAAxB,CAAP;AACD,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiBhC,OAAjB","sourcesContent":["const errors = require(\"./errors\")\n\n/** Provides validation and access methods for a WebHook.\n *\n * Before accessing WebHook data, check if it's valid. Otherwise, exceptions\n * will be raised from access methods.\n *\n * @constructor\n * @param {Token} primary token\n * @param {Object} request\n * @param {Object} request.headers WebHook HTTP headers with lower-case keys\n * @param {String} request.rawBody raw WebHook body\n */\nfunction WebHook(token, request) {\n  this.token = token\n\n  this.key = request.headers[\"x-pusher-key\"]\n  this.signature = request.headers[\"x-pusher-signature\"]\n  this.contentType = request.headers[\"content-type\"]\n  this.body = request.rawBody\n\n  if (this.isContentTypeValid()) {\n    try {\n      // Try to parse as JSON\n      this.data = JSON.parse(this.body)\n    } catch (e) {\n      // Do nothing\n    }\n  }\n}\n\n/** Checks whether the WebHook has valid body and signature.\n *\n * @param {Token|Token[]} list of additional tokens to be validated against\n * @returns {Boolean}\n */\nWebHook.prototype.isValid = function (extraTokens) {\n  if (!this.isBodyValid()) {\n    return false\n  }\n\n  extraTokens = extraTokens || []\n  if (!(extraTokens instanceof Array)) {\n    extraTokens = [extraTokens]\n  }\n\n  const tokens = [this.token].concat(extraTokens)\n  for (const i in tokens) {\n    const token = tokens[i]\n    if (this.key == token.key && token.verify(this.body, this.signature)) {\n      return true\n    }\n  }\n  return false\n}\n\n/** Checks whether the WebHook content type is valid.\n *\n * For now, the only valid WebHooks have content type of application/json.\n *\n * @returns {Boolean}\n */\nWebHook.prototype.isContentTypeValid = function () {\n  return this.contentType === \"application/json\"\n}\n\n/** Checks whether the WebHook content type and body is JSON.\n *\n * @returns {Boolean}\n */\nWebHook.prototype.isBodyValid = function () {\n  return this.data !== undefined\n}\n\n/** Returns all WebHook data.\n *\n * @throws WebHookError when WebHook is invalid\n * @returns {Object}\n */\nWebHook.prototype.getData = function () {\n  if (!this.isBodyValid()) {\n    throw new errors.WebHookError(\n      \"Invalid WebHook body\",\n      this.contentType,\n      this.body,\n      this.signature\n    )\n  }\n  return this.data\n}\n\n/** Returns WebHook events array.\n *\n * @throws WebHookError when WebHook is invalid\n * @returns {Object[]}\n */\nWebHook.prototype.getEvents = function () {\n  return this.getData().events\n}\n\n/** Returns WebHook timestamp.\n *\n * @throws WebHookError when WebHook is invalid\n * @returns {Date}\n */\nWebHook.prototype.getTime = function () {\n  return new Date(this.getData().time_ms)\n}\n\nmodule.exports = WebHook\n"]},"metadata":{},"sourceType":"script"}